apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_8

android {

    compileSdkVersion parent.ext.compileSdkVersion
    buildToolsVersion parent.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.ryanli.quickdev.demo"
        minSdkVersion parent.ext.minSdkVersion
        targetSdkVersion parent.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        Properties properties = new Properties()
        File propFile = rootProject.file('local.properties')
        if (propFile.exists()) {
            properties.load(propFile.newDataInputStream())
        }
        def keyFile = ""
        keyFile = properties.getProperty("RELEASE_STORE_PATH")
        release {
            storeFile file(keyFile)
            keyAlias properties.getProperty("RELEASE_KEY_ALIAS")
            keyPassword properties.getProperty("RELEASE_KEY_PASSWORD")
            storePassword properties.get("RELEASE_STORE_PASSWORD")
            v1SigningEnabled true
            v2SigningEnabled true

        }


    }

    buildTypes {
        debug {
            // 混淆
            minifyEnabled false
            // Zipalign优化
//            zipAlignEnabled true
            // 移除无用的resource文件
//            shrinkResources true
            buildConfigField "String", "BASE_URL", "\"http://\""
            // 前一部分代表系统默认
            // 为了不和 release 版本冲突
            applicationIdSuffix ".debug"
            // 的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            debuggable false
            buildConfigField "String", "BASE_URL", "\"http://\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                if ("release".equals(variant.buildType.name)) {
                    variant.outputs.each { output ->
                        //使用git自动管理版本号和版本名
                        def versionCode = gitVersionCode()
                        def versionName = gitVersionTag()
                        output.versionCodeOverride = versionCode
                        output.versionNameOverride = versionName
                        outputFileName = defaultConfig.applicationId + "-v" + versionCode + "-" + releaseTime() + "-" + variant.buildType.name + ".apk"
                    }

                }

            }
        }

        // 避免 lint 检测出错时停止构建
        lintOptions {
            abortOnError false
        }

        compileOptions {
            sourceCompatibility javaVersion
            targetCompatibility javaVersion
        }

    }
}

def gitVersionCode() {
    def cmd = 'git rev-list HEAD --first-parent --count'
    return cmd.execute().text.trim().toInteger()
}

def gitVersionTag() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()

    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern

    if (matcher) {
        version = version.substring(0, matcher.start()) + "." + matcher[0][1]
    } else {
        version = version + "1.0"
    }

    return version
}


def releaseTime() {
    return new Date().format("yyyyMMHHddmmss", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':arch')
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
//    implementation "com.google.android.material:material:$materialVersion"
}
